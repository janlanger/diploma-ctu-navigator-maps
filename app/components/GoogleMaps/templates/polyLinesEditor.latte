<div class="btn-group pull-left">
    <a href="#" class="btn" id="switcher-add" title="Umístění bodů">Vkládání bodů</a>
    <a href="#" class="btn" id="switcher-detail" title="Úprava sítě">Úprava bodů</a>
</div>
<div id="toolbar-add" class="pull-right">
    <div class="btn-group">
        <a href="#" class="btn" id="marker-intersection" title="Křižovatka"><img src="/images/red_dot.png"></a>
        <a href="#" class="btn" id="marker-entrance" title="Vchod"><img src="/images/exit.png"></a>
        <a href="#" class="btn" id="marker-stairs" title="Schodiště"><img src="/images/stairs.png"></a>
        <a href="#" class="btn" id="marker-elevator" title="Výtah"><img src="/images/elevator.png"></a>
        <a href="#" class="btn" id="marker-passage" title="Průchod"><img src="/images/passage.png"></a>
        <a href="#" class="btn" id="marker-lecture">Učebna</a>
        <a href="#" class="btn" id="marker-auditorium">Posluchárna</a>
        <a href="#" class="btn" id="marker-office">Kancelář</a>
        <a href="#" class="btn" id="marker-study">Studovna</a>
        <a href="#" class="btn" id="marker-cafeteria">Kantýna</a>
        <a href="#" class="btn" id="marker-restroom">Toalety</a>
        <a href="#" class="btn" id="marker-cloakroom">Šatna</a>

    </div>
</div>
<br clear="all">
<div id="tip-line"></div>

<div id="map_canvas" style="width: {$mapWidth}; height: {$mapHeight}; margin: auto"></div>
<hr>
<div id="innerForm" style="display: none;">
    {form form}
        <div id="form-type" style="margin-bottom: 5px; margin-top: 10px;">{input type}</div>
        <div id="form-name" style="margin-bottom: 5px">{input name, 'placeholder'=>'Název'}</div>
        <div id="form-room" style="margin-bottom: 5px">{input room, 'placeholder'=>'Číslo místnosti'}</div>
        <div id="form-toBuilding" style="margin-bottom: 5px">{input toBuilding}</div>
        <div id="form-fromFloor" style="margin-bottom: 5px">{input fromFloor, 'placeholder'=>'Z podlaží (nejnižší)'}</div>
        <div id="form-toFloor" style="margin-bottom: 5px">{input toFloor, 'placeholder'=>'Do podlaží'}</div>
        {input save, 'class'=>'btn btn-primary'}
        {input delete, 'class'=>'btn btn-danger btn-small pull-right'}
    {/form}
</div>


<script type="text/javascript">

    var polyOptions = {
        strokeColor:'#FF0000',
        strokeOpacity:0.7,
        strokeWeight:2
    }

    var tempPolyOptions = {
        strokeOpacity:0,
        strokeColor: '#ff0000',

        icons: [{
            icon: {
                path: 'M 0,-1 0,1',
                strokeOpacity: 0.5,
                strokeWeight: 2,
                scale: 4
            },
            offset: '0',
            repeat: '20px'
        }],
        clickable: false
    }



    function initialize() {
        var mapOptions = {
        {if $zoomLevel != null}
            zoom: {$zoomLevel},
            {else}
            zoom:8,
        {/if}
        {if !empty($center)}
            center:new google.maps.LatLng({$center['lat']},{$center['long']}),
            {else}
            center:new google.maps.LatLng("50.076091", "14.436035"), // prague
        {/if}
            mapTypeId:google.maps.MapTypeId.ROADMAP,
            disableDoubleClickZoom:true,
            draggableCursor: 'crosshair'

        }
        map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);

    {if !empty($points)}
        {foreach $points as $point}
            addMarker(new google.maps.LatLng({$point['lat']}, {$point['long']}), false)
        {/foreach}
    {/if}
        //create polylines


        google.maps.event.addListener(map, 'click', mapClick);
        google.maps.event.addListener(map, 'rightclick', mapRightClick);
        google.maps.event.addListener(map, 'mousemove', mapMouseMove);
        google.maps.event.addListenerOnce(map, 'tilesloaded', function() {
            var definition = JSON.parse($("#"+{$textField->control->id}).val());
            for(var i = 0; i< definition.paths.length; i++) {
                var path = definition.paths[i];
                if(!path.startNode || !path.endNode) {
                    continue;
                }
                var nodes = [path.startNode, path.endNode];
                var m = [];
                for (var j=0; j<nodes.length; j++) {
                    var position = nodes[j].position.split(",");
                    var p = new google.maps.LatLng(position[0],position[1]);
                    if(getMarkerInPosition(p) == null) {
                        options = nodes[j];
                        options.position = undefined;
                       addMarker(p, false, options);
                    }
                    m.push(p);
                }
                createPolyLine(m[0]);
                finishPolyline(m[1]);
            }
        });
    }

    function loadScript() {
        var script = document.createElement("script");
        script.type = "text/javascript";
        script.src = "http://maps.googleapis.com/maps/api/js?key="+{$apiKey}+
        "&sensor=false&callback=initialize";
        document.body.appendChild(script);
        
    }

    $(window).load(function() {
        loadScript();
        
        $("#"+{$submit->control->id}).click(function(event) {
            var field = $("#"+{$textField->control->id});
            var markerFields = [];
            for(var i=0; i<markers.length; i++) {
                var x = {
                    id: i,
                    type: markers[i].appType,
                    state: markers[i].appState,
                    position: markers[i].position.lat() + "," + markers[i].position.lng()
                };
                if(markers[i].appValues != null) {
                    $.extend(x,markers[i].appValues);
                }
                markerFields.push(x);
            }
            var lineFields = [];
            for(var i=0; i<lines.length; i++) {
                lineFields.push({
                    startNode: markerFields[getMarkerIndexInPosition(lines[i].getPath().getAt(0))],
                    endNode: markerFields[getMarkerIndexInPosition(lines[i].getPath().getAt(1))],
                    state: lines[i].appState
                });
            }
            field.val(JSON.stringify({ paths: lineFields}));
        });
    });

</script>
<script type="text/javascript" src="/js/polylineEditor.js"></script>
